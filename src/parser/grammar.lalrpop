use crate::model::*;
use crate::parser::*;
use line_col::LineColLookup;

grammar(lookup: &LineColLookup<'input>, parser: &mut Parser);

match {
    r"\s*" => { }, // The default whitespace skipping is disabled an `ignore pattern` is specified
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },  // Skip `/* comments */`
    _
}

//------------------------- Model -------------------------

pub Model: () = Entry* => {};

//------------------------- Entry -------------------------

Entry: () = {
    IncludeSingle,
    IncludeBlock,
    //RobotSingle,
    //RobotBlock,
    TypeSingle,
    TypeBlock,
    Function,
    DeclMethod,
};

//------------------------- Include RL Model -------------------------

IncludeSingle: () = "include" <file:String> => {
    parser.model.add_include(&file);
    parser.rl_parser.add(file);
};

IncludeBlock: () = "include" "{" <l:(<String>)*> "}" => {
    for file in l {
        parser.model.add_include(&file);
        parser.rl_parser.add(file);
    }
};

//------------------------- Type -------------------------

Type: Type = <i:Identifier> => {
    Type::Unresolved(i.name, Some(i.position.clone()))
};

//------------------------- Robot Definition -------------------------

//RobotDef: Robot = <x:Identifier> ":" <s:Identifier> => {
//    Robot::new(x.name, s, Some(x.position))
//};
//
//RobotSingle: () = "robot" <r:RobotDef> => parser.model.add_robot(r);
//RobotBlock: () = "robot" "{" <l:RobotDef*> "}" => {
//    for r in l {
//        parser.model.add_robot(r);
//    };
//};

//------------------------- Type Definition -------------------------

TypeSingle: () = "type" <x:Identifier> => {
    let x = RlcType::new(x.name, Some(x.position));
    parser.model.add_type(x);
};

TypeBlock: () = "type" "{" <l:(<Identifier>)*> "}" => {
    for x in l {
        let x = RlcType::new(x.name, Some(x.position));
        parser.model.add_type(x);
    }
};

//------------------------- Function -------------------------

Function: () = "def" <x:Identifier> <p:Parameters> "{" <e:Expr> "}"=> {
    let x = Function::new(x.name, p, e, Some(x.position));
    parser.model.add_function(x);
};

//------------------------- Declared Methods -------------------------

DeclMethod: () = "dec" <x:Identifier> <p:Parameters> => {
    let x = DeclMethod::new(x.name, p, Some(x.position));
    parser.model.add_declared_method(x);
};

//------------------------- Parameter -------------------------

Parameter: Parameter = <i:Identifier> ":" <t:Type> => {
    let position = Some(i.position.clone());
    Parameter::new(i.name, t.clone(), position)
};

Parameters: Vec<Parameter> = {
    "(" ")" => vec![],
    "(" <p:Parameter> <l:ComaParameter*>")" => {
        let mut v = vec![p];
        v.extend(l);
        v
    }
};

ComaParameter: Parameter = "," <p:Parameter> => p;


//========================= Expr =========================

Expr:Expr = OrExpr;

OrExpr: Expr = {
    <l:@L><e:AndExpr> <v: ("or" <AndExpr>)+> => {
        let position = Some(Position::new(parser.file(), lookup, l));
        let mut kids = vec![e];
        kids.extend(v);
        let expression = Expression::Nary(NaryOperator::Or, kids);
        Expr::new(expression, position)
    },
    AndExpr,
};

AndExpr: Expr = {
    <l:@L><e:IfThenElseExpr> <v: ("and" <IfThenElseExpr>)+> => {
        let position = Some(Position::new(parser.file(), lookup, l));
        let mut kids = vec![e];
        kids.extend(v);
        let expression = Expression::Nary(NaryOperator::And, kids);
        Expr::new(expression, position)
    },
    IfThenElseExpr,
};

IfThenElseExpr: Expr = {
    <l:@L>"if" <c:Expr> "then" <t:Expr> <v:ElifExpr*> "else" <e:Expr> "end" => {
        let position = Some(Position::new(parser.file(), lookup, l));
        let c = Box::new(c);
        let t = Box::new(t);
        let e = Box::new(e);
        let expression = Expression::IfThenElse(c, t, v, e);
        Expr::new(expression, position)
    },
    RaceExpr,
};
ElifExpr: (Expr, Expr) = "elif" <x:Expr> "then" <y:Expr> => (x, y);

RaceExpr: Expr = {
    <l:@L><e:ParallelExpr> <v: ("!" <ParallelExpr>)+> => {
        let position = Some(Position::new(parser.file(), lookup, l));
        let mut kids = vec![e];
        kids.extend(v);
        let expression = Expression::Composition(CompositionOperator::Race, kids);
        Expr::new(expression, position)
    },
    ParallelExpr,
};

ParallelExpr: Expr = {
    <l:@L><e:ChoiceExpr> <v: ("|" <ChoiceExpr>)+> => {
        let position = Some(Position::new(parser.file(), lookup, l));
        let mut kids = vec![e];
        kids.extend(v);
        let expression = Expression::Composition(CompositionOperator::Parallel, kids);
        Expr::new(expression, position)
    },
    ChoiceExpr,
};

ChoiceExpr: Expr = {
    <l:@L><e:SequenceExpr> <v: ("+" <SequenceExpr>)+> => {
        let position = Some(Position::new(parser.file(), lookup, l));
        let mut kids = vec![e];
        kids.extend(v);
        let expression = Expression::Composition(CompositionOperator::Choice, kids);
        Expr::new(expression, position)
    },
    SequenceExpr,
};

SequenceExpr: Expr = {
    <l:@L><e:TermExpr> <v: (">" <TermExpr>)+> => {
        let position = Some(Position::new(parser.file(), lookup, l));
        let mut kids = vec![e];
        kids.extend(v);
        let expression = Expression::Composition(CompositionOperator::Sequence, kids);
        Expr::new(expression, position)
    },
    TermExpr,
};


// PrefixExpr: Expr = {

// };
// <l:@L><e:ParallelExpr> <v: ("!" <ParallelExpr>)+>
TermExpr: Expr = {

    // Function call
    <x:Identifier> "(" <e:Expr> <v:("," <Expr>)*> ")" => {
        let mut kids = vec![e];
        kids.extend(v);
        let expression = Expression::UnresolvedFunctionCall(x.name, kids);
        Expr::new(expression, Some(x.position))
    },
    <x:Identifier> "(" ")" => {
        let expression = Expression::UnresolvedFunctionCall(x.name, vec![]);
        Expr::new(expression, Some(x.position))
    },
    <x:Identifier> => Expr::new_unresolved(x.name, Some(x.position)),
    "(" <Expr> ")",

    // Decl Method call

    // Skill call
    <x:Identifier>"."<y:Identifier> "(" <e:Expr> <v:("," <Expr>)*> ")" => {
        let mut kids = vec![e];
        kids.extend(v);
        let expression = Expression::UnresolvedSkillCall(x.name, y.name, kids);
        Expr::new(expression, Some(x.position))
    },
    <x:Identifier>"."<y:Identifier> "(" ")" => {
        let expression = Expression::UnresolvedSkillCall(x.name, y.name, vec![]);
        Expr::new(expression, Some(x.position))
    },

    // ROS API
    "ros.publish(" <topic:String> <v:("," <Expr>)*> ")" => {
        let expression = Expression::RosCall(topic,RosCallType::Publish, v);
        let position = Some(Position::new(parser.file(), lookup, 0));
        Expr::new(expression, position)
    },
    "ros.service(" <topic:String> <v:("," <Expr>)*> ")" => {
        let expression = Expression::RosCall(topic,RosCallType::Service, v);
        let position = Some(Position::new(parser.file(), lookup, 0));
        Expr::new(expression, position)
    },
    "ros.action(" <topic:String> <v:("," <Expr>)*> ")" => {
        let expression = Expression::RosCall(topic,RosCallType::Action, v);
        let position = Some(Position::new(parser.file(), lookup, 0));
        Expr::new(expression, position)
    },
};

//========================= Lexer =========================

String: String = <s:r#"".+""#> => s[1..s.len()-1].to_string();

Boolean: bool = {
    "false" => false,
    "true" => true,
};

Integer: i64 = <i:r"-?[0-9]+"> => i.parse::<i64>().unwrap();

Identifier: Identifier = <l:@L> <s:r"[a-zA-Z][a-zA-Z_0-9]*"> <r:@R> => {
    Identifier::new(parser.file(), lookup, s, l)
};